{
  "0": {
    "id": "0",
    "title": "",
    "content": "404 Page not found :( The requested page could not be found.",
    "url": "http://localhost:4000/404.html",
    "relUrl": "/404.html"
  },
  "1": {
    "id": "1",
    "title": "API",
    "content": "API The instance of the swup can be imported and used across your sites JavaScript to enable some additional features. With debug plugin enabled, instance is also available in window object as window.swup.",
    "url": "http://localhost:4000/api",
    "relUrl": "/api"
  },
  "2": {
    "id": "2",
    "title": "Cache",
    "content": "Cache TODO // remove page from cache swup.cache.remove(&#39;/your-url&#39;);",
    "url": "http://localhost:4000/api/cache",
    "relUrl": "/api/cache"
  },
  "3": {
    "id": "3",
    "title": "Contributions",
    "content": "Contributions Any contributions or suggestions are more than welcome. If you have a suggestion, open an issue. Creating plugins and themes is encouraged and if the use case is general, there is no problem in making it official swup plugin - contact me at gmarcuk@gmail.com. If you just can’t get your head around how much swup makes your life easier, you can buy me a beer. If you’d like to share your work utilizing swup with me or others, please, drop me a link at gmarcuk@gmail.com. Logo by Honza Jura.",
    "url": "http://localhost:4000/contributions",
    "relUrl": "/contributions"
  },
  "4": {
    "id": "4",
    "title": "Create Plugin 🎉",
    "content": "Create Plugin Anyone can create and publish swup plugins. Start with heading to this repo and follow the instructions there. Tips Checkout existing plugins before creating one. Swup instance is automatically assigned to the plugin instance and can be accessed under this.swup in mount/unmount methods. If you feel like this should be an official swup plugin (under npm @swup organization) and the world could use a thing like this, contact me at gmarcuk@gmail.com. Use swups log method to output any relevant information. By default the method doesn’t do anything, but swup does output any calls in case debug plugin is used. All plugins should clean up any changes to swup/event listeners in umount method.",
    "url": "http://localhost:4000/plugins/create-plugin",
    "relUrl": "/plugins/create-plugin"
  },
  "5": {
    "id": "5",
    "title": "Create Theme 🎉",
    "content": "Create Plugin Anyone can create and publish swup themes. Start with heading to this repo and follow the instructions there. Tips Checkout existing themes before creating one. Swup instance is automatically assigned to the theme instance and can be accessed under this.swup in mount/unmount methods. Swup theme automatically sets swup animationSelector option to [class*=&quot;swup-transition-&quot;] to prevent bugs related to other libraries using the same classes. Use swup-transition-* for your theme classes. Themes get a few special helper methods below. These are primarily there because swup theme will automatically cleanup the use of these methods in case the theme is disabled. applyStyles to prepend style tag with defined content in the head tag. addClassName to add swup-transition-[name] classname to an element. applyHTML to append a DIV element with defined HTML content. If you feel like this should be an official swup theme (under npm @swup organization) and the world could use a thing like this, contact me at gmarcuk@gmail.com. Use swups log method to output any relevant information. By default the method doesn’t do anything, but swup does output any calls in case debug plugin is used. All themes should clean up any changes to swup/event listeners in umount method.",
    "url": "http://localhost:4000/themes/create-theme",
    "relUrl": "/themes/create-theme"
  },
  "6": {
    "id": "6",
    "title": "Debug Plugin",
    "content": "Swup Debug plugin Debug plugin adds some useful functionality to the swup for development purposes. Mainly, it outputs all the events in a console as they happen, which can be useful for debugging. Plugin rewrites swups log method, so any output provided by plugins is visible. Plugin also tries to detect some common mistakes, and outputs a suggestions into a console. The list of mistakes the plugin detects is expected to grow over time. Instalation This plugin can be installed with npm npm install @swup/debug-plugin and included with import import SwupDebugPlugin from &#39;@swup/debug-plugin&#39;; or included from the dist folder &lt;script src=&quot;./dist/SwupDebugPlugin.js&quot;&gt;&lt;/script&gt; Usage To run this plugin, include an instance in the swup options. const swup = new Swup({ plugins: [new SwupDebugPlugin()] });",
    "url": "http://localhost:4000/plugins/debug-plugin",
    "relUrl": "/plugins/debug-plugin"
  },
  "7": {
    "id": "7",
    "title": "Demo",
    "content": "Demo Here is a little demo to fork. In case you’re into JS animations, this demo might be better for you together with the JS Plugin.",
    "url": "http://localhost:4000/getting-started/demo",
    "relUrl": "/getting-started/demo"
  },
  "8": {
    "id": "8",
    "title": "Events",
    "content": "Events As we are replacing the native functionality of the browser, there is a need for a lifecycle that would replace the standard browser page lifecycle (load page and leave page). Swup emits bunch of events, that we can use to enable JavaScript, trigger analytics, and much more. Handlers are registered and unregistered with swups on and off methods. When possible, swup also passes original event into the handler (clickLink, hoverLink, and such events get delegateTarget property as the referenced element due to the event propagation). // trigger page view for GTM swup.on(&#39;pageView&#39;, function() { dataLayer.push({ event: &#39;VirtualPageview&#39;, virtualPageURL: window.location.pathname, virtualPageTitle: document.title }); }); swup.on(&#39;contentReplaced&#39;, function() { swup.options.containers.forEach((selector) =&gt; { // load scripts for all elements with &#39;selector&#39; }); }); swup.off(&#39;pageView&#39;, handler); // removes single handler of &#39;pageView&#39; event swup.off(&#39;pageView&#39;); // removes all handlers for &#39;pageView&#39; event swup.off(); // removes all handlers for all events Note: example with enabling scripts above assumes using component based approach, like the one used by Gia framework. For backward compatibility, all events are also triggered on the document with swup: prefix. document.addEventListener(&#39;swup:contentReplaced&#39;, (event) =&gt; { // do something when content is replaced }); List of all events EventName Description animationInDone triggers when transition of all animated elements is done (after content is replaced) animationInStart triggers when animation IN starts (class is-animating is removed from html tag) animationOutDone triggers when transition of all animated elements is done (after click of link and before content is replaced) animationOutStart triggers when animation OUT starts (class is-animating is added to html tag) animationSkipped triggers when transition is skipped (on back/forward buttons) clickLink triggers when link is clicked contentReplaced triggers right after the content of page is replaced disabled triggers on destroy() enabled triggers when swup instance is created or re-enabled after call of destroy() hoverLink triggers when link is hovered openPageInNewTab triggers when page is opened to new tab (link clicked when control key is pressed) pageLoaded triggers when loading of some page is done pagePreloaded triggers when the preload of some page is done (differs from pageLoaded only by the source of event - hover/click) pageRetrievedFromCache triggers when page is retrieved from cache and no request is necessary pageView similar to contentReplaced, except it is once triggered on load popState triggers on popstate events (back forward button) samePage triggers when link leading to the same page is clicked samePageWithHash triggers when link leading to the same page with #someElement in the href attribute is clicked scrollDone triggers when built in scroll is done scrollStart triggers when built in scroll is started submitForm triggers when form is submitted trough swup (right before submission) transitionStart triggers when trasition start (loadPage method is called) transitionEnd triggers when transition ends (content is replaced and all animations are done willReplaceContent triggers right before the content of page is replaced",
    "url": "http://localhost:4000/events",
    "relUrl": "/events"
  },
  "9": {
    "id": "9",
    "title": "Example",
    "content": "Example First thing we need to do is prepare our HTML content. Define the elements that are being animated and elements (containers) that need to be replaced. Let’s assume we want to fade in/out the content of main element and replace it’s contents. Add swup id to tell swup to replace the content of that element and your animation class to tell swup to wait for that element to animate. Both are adjustable in options and are not related to each other (you can animate completely different elements than the containers). &lt;html&gt; &lt;head&gt; &lt;title&gt;Homepage&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;main id=&quot;swup&quot; class=&quot;transition-fade&quot;&gt; &lt;h1&gt;This is homepage&lt;/h1&gt; &lt;p&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. &lt;/p&gt; &lt;a href=&quot;/someOtherPage&quot;&gt;Go to other page&lt;/a&gt; &lt;/main&gt; &lt;/body&gt; &lt;/html&gt; Enable swup. import Swup from &#39;swup&#39;; const swup = new Swup(); // only this line when included with script tag Add your css for the element animation. .transition-fade { transition: 0.4s; opacity: 1; } html.is-animating .transition-fade { opacity: 0; } And believe it or not, that’s it! We’re all set, or at least for our simple fade in/fade out example… Swup loads the page, handles classes for the css animation, waits for the animation to finish/page to load, replaces content and fades your content back. Swup also changes the title of your page to the loaded one, and exchanges classes of body element (more in options section). Would you like to try it out yourself? Head to the demo page.",
    "url": "http://localhost:4000/getting-started/example",
    "relUrl": "/getting-started/example"
  },
  "10": {
    "id": "10",
    "title": "Forms Plugin",
    "content": "Swup Forms plugin Plugin adds support form forms. Any form that matches the formSelector is sent via swup (with transition). Swup will take the form data and submit it with appropriate method and action based on form attributes, where method defaults to GET and action defaults to current url. In case of GET method, swup serializes the data into url. For POST requests, swup wraps the data and sends it via POST request. Note: This feature is rather experimental and serves to enable submission of simple forms such as “search on website” form. The response from the server must be a valid page with all elements that need to be replaced by swup. This method does not support submission of files, or other advanced features. If you’re looking for such features, please, use swup API to send requests. Instalation This plugin can be installed with npm npm install @swup/forms-plugin and included with import import SwupFormsPlugin from &#39;@swup/forms-plugin&#39;; or included from the dist folder &lt;script src=&quot;./dist/SwupFormsPlugin.js&quot;&gt;&lt;/script&gt; Usage To run this plugin, include an instance in the swup options. const swup = new Swup({ plugins: [new SwupFormsPlugin()] }); Options formSelector formSelector option defines a selector for forms which should be sent via swup (with transition as any other request). By default, any form with data-swup-form attribute is selected. new SwupFormsPlugin({formSelector: &#39;form[data-swup-form]&#39;});",
    "url": "http://localhost:4000/plugins/forms-plugin",
    "relUrl": "/plugins/forms-plugin"
  },
  "11": {
    "id": "11",
    "title": "GA Plugin",
    "content": "Swup GA plugin Google Analytics plugin triggers pageview event on contentReplaced (on each page change). Note that this event is not triggered at the first load, so the first page view must be triggered elsewhere. However, page view event is by default triggered in Javascripts tracking snippet used for embedding GA. Simplified code run by this plugin on contentReplaced event: window.ga(&#39;set&#39;, &#39;title&#39;, document.title); window.ga(&#39;set&#39;, &#39;page&#39;, window.location.pathname + window.location.search); window.ga(&#39;send&#39;, &#39;pageview&#39;); Instalation This plugin can be installed with npm npm install @swup/ga-plugin and included with import import SwupGaPlugin from &#39;@swup/ga-plugin&#39;; or included from the dist folder &lt;script src=&quot;./dist/SwupGaPlugin.js&quot;&gt;&lt;/script&gt; Usage To run this plugin, include an instance in the swup options. const swup = new Swup({ plugins: [new SwupGaPlugin()] });",
    "url": "http://localhost:4000/plugins/google-analytics-plugin",
    "relUrl": "/plugins/google-analytics-plugin"
  },
  "12": {
    "id": "12",
    "title": "Getting Started",
    "content": "Getting Started Looking for what’s new in v2? Head over here. New to swup? Little intro: It’s just ridiculously easy to use, even for beginners. Define as many containers to replace as you want! You can tell swup to replace even the smallest parts of the page, so you can work with the rest for your animation. Use swup events to run your JavaScript, trigger analytics, close sidebars or anything you need… Forget about timing. swup detects the end of your animations and controls the whole lifecycle of transition automatically. Don’t worry about browser history… swup takes care of it, changes the url when it’s needed and preserves browser native behavior on popState events. Has some cool additional features for even better experience like cache, smart preload without DDOSing your server, badass smooth “acceleration based” scroll control, helpful debug mode, or support for forms. In case you like to do your animations in JavaScript, you may want to check out js-plugin. If you’re having trouble implementing swup, checkout Common Issues, Closed Issues or open a new one. Swup is released under MIT license. Some websites using swup To get an idea of what swup does… Tvoříme lepší svět - Panasonic 25 let - Raiffeisen stavební spořitelna Plan-k - KPMG Dělej, co tě baví - Decathlon Kyle Decker - Personal website",
    "url": "http://localhost:4000/getting-started",
    "relUrl": "/getting-started"
  },
  "13": {
    "id": "13",
    "title": "Good to Know",
    "content": "Good to know Helpful, but not necessary info on swup… Request Header Swup sets X-Requested-With request header to value swup. This can be used to control what the server sends back for swup, like swup content blocks without layout. Keep in mind that order of blocks in such layout-less response must be the same as it is in the normal rendered page. The response can take other forms, like JSON. In that case, swups getDataFromHtml method must be modified to fit your needs and return the same information for swup to save in cache.",
    "url": "http://localhost:4000/getting-started/good-to-know",
    "relUrl": "/getting-started/good-to-know"
  },
  "14": {
    "id": "14",
    "title": "GTM Plugin",
    "content": "Swup GTM plugin Google Tag Manager Plugin triggers VirtualPageview event on contentReplaced (on each page change) which can be associated with a page view within GTM. Event object also includes virtualPageURL holding the url of the page and virtualPageTitle holding the title of the page. Note that this event is not triggered at the first load, so the first page view must be triggered elsewhere. Simplified code run by this plugin on contentReplaced event: window.dataLayer.push({ event: &#39;VirtualPageview&#39;, virtualPageURL: window.location.pathname + window.location.search, virtualPageTitle: document.title }); Instalation This plugin can be installed with npm npm install @swup/gtm-plugin and included with import import SwupGtmPlugin from &#39;@swup/gtm-plugin&#39;; or included from the dist folder &lt;script src=&quot;./dist/SwupGtmPlugin.js&quot;&gt;&lt;/script&gt; Usage To run this plugin, include an instance in the swup options. const swup = new Swup({ plugins: [new SwupGtmPlugin()] });",
    "url": "http://localhost:4000/plugins/google-tag-manager-plugin",
    "relUrl": "/plugins/google-tag-manager-plugin"
  },
  "15": {
    "id": "15",
    "title": "Helpers",
    "content": "Helpers TODO Helpers here",
    "url": "http://localhost:4000/api/helpers",
    "relUrl": "/api/helpers"
  },
  "16": {
    "id": "16",
    "title": "How it works",
    "content": "How it works Apart from loading the contents of the new page and replacing required parts in DOM, swup is built around CSS transition. The main thing that needs to be done is defining hidden state in CSS. Swup detects the end of transition of animated elements and proceeds to replacing the content and animating your page back. For the animations based on CSS to be possible, swup uses several classes that are assigned to the html tag through the process of page transition. is-animating - This class is assigned to the html tag once link is clicked and is removed shortly after the content of the page is replaced. Used for defining styles for an unloaded page. is-changing - Assigned once a link is clicked and removed when the whole process of transition of pages is done. Used for showing some loading. is-leaving - Assigned once a link is clicked and removed right before the content is replaced. Can be used together with is-animating to create different animation for IN and OUT. is-rendering - Assigned right before the content is replaced and removed when the whole process of transition of pages is done. Same use case as above. to-[route of next page in URL friendly form] - Assigned once a link is clicked and removed when the whole process of transition of pages is done. Custom class can be also added by adding data-swup-transition to the link, where to-[content of data-swup-transition attribute] is added to html. Class can be used to change animation for different URLs.",
    "url": "http://localhost:4000/getting-started/how-it-works",
    "relUrl": "/getting-started/how-it-works"
  },
  "17": {
    "id": "17",
    "title": "",
    "content": "Complete, flexible, extensible and easy to use page transition library.",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },
  "18": {
    "id": "18",
    "title": "Installation",
    "content": "Installation Swup can be installed from npm… npm install swup …or include the file from the dist folder… &lt;script src=&quot;./dist/swup.js&quot;&gt;&lt;/script&gt; Run Swup To run swup, create new instance of Swup class. import Swup from &#39;swup&#39;; const swup = new Swup(); // only this line when included with script tag",
    "url": "http://localhost:4000/getting-started/installation",
    "relUrl": "/getting-started/installation"
  },
  "19": {
    "id": "19",
    "title": "JS Plugin",
    "content": "Swup JS plugin (swupjs) Plugin modifies swup for use with JavaScript animations. Timing and animations are based on JavaScript, not CSS transitions. Plugin provides the same functionality as currently deprecated swupjs and serves as a replacement. Instalation This plugin can be installed with npm npm install @swup/js-plugin and included with import import SwupJsPlugin from &#39;@swup/js-plugin&#39;; or included from the dist folder &lt;script src=&quot;./dist/SwupJsPlugin.js&quot;&gt;&lt;/script&gt; Usage To run this plugin, include an instance in the swup options. const swup = new Swup({ plugins: [new SwupJsPlugin()] }); Options Plugin options is an object of animations. The example below is the default setup and defines two animations, where out property is the animation (function) being executed before content replace, and in is animation being executed after the content is replaced. One parameter is passed into both functions. Call of next function serves as an indicator, that animation is done - so in a real world next() would be called as a callback of the animation. As you can see, by default no animation is being executed and next() is called right away. const options = { &#39;*&#39;: { out: (next) =&gt; next(), in: (next) =&gt; next() } }; In the example below, next function is called after two seconds, which means that swup would wait two seconds (or any time necessary for the load of the new page content), before continuing to the content replace. ... out: (next) =&gt; { setTimeout(next, 2000); } ... Basic usage with tools like GSAP would look something like the following: const options = { &#39;*&#39;: { in: function(next) { document.querySelector(&#39;#swup&#39;).style.opacity = 0; TweenLite.to(document.querySelector(&#39;#swup&#39;), 0.5, { opacity: 1, onComplete: next }); }, out: function(next) { document.querySelector(&#39;#swup&#39;).style.opacity = 1; TweenLite.to(document.querySelector(&#39;#swup&#39;), 0.5, { opacity: 0, onComplete: next }); } } }; const swup = new Swup({ plugins: [new SwupJsPlugin(options)] }); Choosing the animation As one may have noticed, the name of animation object in options is defined as &#39;*&#39;, which serves as a fallback or base set of animations used throughout the website. Custom animations can be defined for a transition between any pages, where the name is defined by [starting route]&gt;[final route]. ... &#39;homepage&gt;documentation&#39;: { out: (next) =&gt; next(), in: (next) =&gt; next() } ... The animation above would be executed for the transition between homepage (/) and documentation page (/documentation). Notice that for the lack of route, keyword homepage is used. Any of the two routes can also be defined by wildcard symbol (homepage&gt;* or *&gt;documentation). The most fitting animation is always chosen. Custom animation to dynamic pages Similarly to swup default behaviour, where data-swup-transition attribute of the clicked link is used for assigning a special class to the html tag, this plugin uses the same attribute for choosing custom animation. In case the attribute is defined on clicked link, plugin also tests the animation object for the content of the data attribute. So following attribute data-swup-transition=&quot;post&quot; would end up in *&gt;post being executed.",
    "url": "http://localhost:4000/plugins/js-plugin",
    "relUrl": "/plugins/js-plugin"
  },
  "20": {
    "id": "20",
    "title": "Methods",
    "content": "Methods TODO // navigates to /someRoute with the animations and all... (can be used to submit forms) swup.loadPage({ url: &#39;/someRoute&#39;, // route of request (defaults to current url) method: &#39;GET&#39;, // method of request (defaults to &quot;GET&quot;) data: data, // data passed into XMLHttpRequest send method customTransition: &#39;&#39; // name of your transition used for adding custom class to html element and choosing custom animation in swupjs (as setting data-swup-transition attribute on link) }); // makes request and saves page to cache swup.preloadPage(&#39;/page-url&#39;); // scroll page to some position (2000px from top in this example) swup.scrollTo(document.body, 2000); Note: loadPage function is used to submit forms with swup. For more information on submitting forms with XMLHttpRequest, refer to Sending forms through JavaScript. // register event handler swup.on(&#39;clickLink&#39;, function(event) { console.log(event); }); // disable swup swup.destroy(); …and much more. Sky is the limit here, explore swup or create an issue for some particular example!",
    "url": "http://localhost:4000/api/methods",
    "relUrl": "/api/methods"
  },
  "21": {
    "id": "21",
    "title": "Options",
    "content": "Options Swup has a several options that can be passed into a constructor as an object. const options = {}; const swup = new Swup(options); Link Selector Link selector defines link elements that will trigger the transition. By default, the selector takes any link with href attribute starting with /, # or current domain. const options = { linkSelector: &#39;a[href^=&quot;&#39; + window.location.origin + &#39;&quot;]:not([data-no-swup]), a[href^=&quot;/&quot;]:not([data-no-swup]), a[href^=&quot;#&quot;]:not([data-no-swup])&#39; } In case you want to exclude links for some routes, lightbox or any other functionality, extend the selector. By default, you can add [data-no-swup] attribute to the link, if you want to exclude just a few. Animation Selector As swup is built on animations, it is required to define the elements that are being animated. Usually, you would like to give the elements some common class or class prefix. By default option is set to [class*=&#39;transition-&#39;], which selects all elements with class attribute containing transition-. const options = { animationSelector: &#39;[class*=&quot;transition-&quot;]&#39; }; Containers Containers option defines the array of selectors of containers, where the content needs to be replaced. Containers option usually contains the main element with the content of the page, but can include any element that is present across all pages. This creates a possibility of animating elements on the page while still replacing it’s parts. Another good example where this is helpful is the change language link, which usually appears the same across the site (no animation needed), but leads to a different URL on each page. Option defaults to the single container of id #swup. const options = { container: [&#39;#swup&#39;] }; Cache Swup has a built-in cache, meaning that it stores previously loaded contents of the pages in memory in a form of an object. This drastically improves speed for static sites but should be disabled for dynamic sites. Cache option defaults to true. const options = { cache: true }; Page Class Prefix Some CSS styles are very often based on the class of the page defined in the body element. Swup replaces the body classes for each loaded page. However, the site may use the body class attribute for functionality such as opening of some sort of menu by adding class to the body element. In that case, you may want to define a prefix for your page style classes such as page-, so only those are replaced by swup. By default option is set to &#39;&#39; and all classes of body element are replaced during the transition. In case the class attribute on body is not used at all, the class replacement can be disabled all together by setting the option to false. const options = { pageClassPrefix: &#39;&#39; } Skip popState Handling Swup is built around browser history API, but sometimes some other tools manipulating the browser history can be used as well. For this reason, swup places a source property into every history state object it creates, so it can be later identified (swup also modifies current history record on start, to include the “swup” source property as well). On popState events, swup only handles the records that were created by swup. This behavior can be modified by skipPopStateHandling option, which is represented by a function returning boolean (false = handle the popstate, true = do nothing). The function accepts one argument - the popstate event. Option defaults to the following: const options = { skipPopStateHandling: function(event){ if (event.state &amp;&amp; event.state.source == &quot;swup&quot;) { return false; } return true; } } Animate History Browsing Option enables the animation on popstate events. Swup adds is-popstate class to html tag for the whole process of animation on back/forward browsing. Note that when this option is enabled, swup disables browser native scroll control (sets scrollRestoration to manual) and takes over this task. This means that position of scroll on previous page(s) is not preserved (but can be implemented manually based on use case). Otherwise swup scrolls to top/#element on popstate as it does with normal browsing. Default value is false. const options = { animateHistoryBrowsing: false }; Default Options The default option object look like… const options = { linkSelector: &#39;a[href^=&quot;&#39; + window.location.origin + &#39;&quot;]:not([data-no-swup]), a[href^=&quot;/&quot;]:not([data-no-swup]), a[href^=&quot;#&quot;]:not([data-no-swup])&#39;, containers: [&#39;#swup&#39;], animationSelector: &#39;[class*=&quot;transition-&quot;]&#39;, cache: true, pageClassPrefix: &#39;&#39;, skipPopStateHandling: function(event) { if (event.state &amp;&amp; event.state.source == &#39;swup&#39;) { return false; } return true; }, animateHistoryBrowsing: false };",
    "url": "http://localhost:4000/options",
    "relUrl": "/options"
  },
  "22": {
    "id": "22",
    "title": "Plugins",
    "content": "Plugins Some functionality is only necessary in certain projects. For this reason, swup has support for plugins that can, but don’t have to be used. Plugin Installation import Swup from &#39;swup&#39;; import ScrollPlugin from &#39;@swup/scroll-plugin&#39;; and enable plugin at initialisation of swup by including it in options: const options = { plugins: [new ScrollPlugin()] }; const swup = new Swup(options); Plugin Methods Alternatively, you can use swup use, unuse methods to run/remove plugins. Method findPlugin can be particularly useful for manipulating the plugin directly or using its methods. const swup = new Swup(); swup.use(new ScrollPlugin()); // start plugin swup.findPlugin(&#39;ScrollPlugin&#39;); // returns instance of plugin",
    "url": "http://localhost:4000/plugins",
    "relUrl": "/plugins"
  },
  "23": {
    "id": "23",
    "title": "Preload Plugin",
    "content": "Swup Preload plugin Plugin adds preload functionality. Firstly, any link element found in DOM with the [data-swup-preload] attribute is automatically preloaded. Swup also tries to speed up the process of loading by starting the preload on hover over the link. In case one request is already running for preload from hover, swup won’t start another request, to prevent unnecessary overloading of server. Instalation This plugin can be installed with npm npm install @swup/preload-plugin and included with import import SwupPreloadPlugin from &#39;@swup/preload-plugin&#39;; or included from the dist folder &lt;script src=&quot;./dist/SwupPreloadPlugin.js&quot;&gt;&lt;/script&gt; Usage To run this plugin, include an instance in the swup options. const swup = new Swup({ plugins: [new SwupPreloadPlugin()] }); Changes of swup instance Plugin adds two methods to the swup instance - preloadPage and preloadPages. preloadPage accepts URL path and returns a promise describing loading of the page. preloadPages scans DOM for links with [data-swup-preload] attribute and calls preloadPage for each URL.",
    "url": "http://localhost:4000/plugins/preload-plugin",
    "relUrl": "/plugins/preload-plugin"
  },
  "24": {
    "id": "24",
    "title": "Scroll Plugin",
    "content": "Swup Scroll plugin Plugin adds awesome “acceleration based” automatic scrolling into the process of transition. Scrolling behaviour is customizable with options. Instalation This plugin can be installed with npm npm install @swup/scroll-plugin and included with import import SwupScrollPlugin from &#39;@swup/scroll-plugin&#39;; or included from the dist folder &lt;script src=&quot;./dist/SwupScrollPlugin.js&quot;&gt;&lt;/script&gt; Usage To run this plugin, include an instance in the swup options. const swup = new Swup({ plugins: [new SwupScrollPlugin()] }); Options doScrollingRightAway doScrollingRightAway defines if swup is supposed to wait for the replace of the page to scroll to the top. animateScroll animateScroll defines whether the scroll animation is enabled or swup simply sets the scroll without animation instead. scrollFriction and scrollAcceleration Animation of scroll is adjustable with options scrollFriction and scrollAcceleration. default options new SwupScrollPlugin({ doScrollingRightAway: false, animateScroll: true, scrollFriction: 0.3, scrollAcceleration: 0.04, }); Changes of swup instance Plugins ads scrollTo method to the swup instance, which can be later used for custom scrolling. Method accepts offset in pixels or element you want to scroll to.",
    "url": "http://localhost:4000/plugins/scroll-plugin",
    "relUrl": "/plugins/scroll-plugin"
  },
  "25": {
    "id": "25",
    "title": "Themes",
    "content": "Theme Theme are essentially a plugins with a different purpose. All the technicalities are identical to plugins (like enabling/disabling one), but purpose is to provide easy way to include required CSS or HTML structure for the transitions to enable event more Plug&amp;Play vibe. You can try out initially available official templates below, just choose one and head to some other page… Additionally to the plugins(which only get mount and unmount methods), themes get several helper methods that should easy up development. Find out more about creating your own theme here.",
    "url": "http://localhost:4000/themes",
    "relUrl": "/themes"
  },
  "26": {
    "id": "26",
    "title": "Variables",
    "content": "Variables TODO",
    "url": "http://localhost:4000/api/variables",
    "relUrl": "/api/variables"
  }
  
}
